/*

This is my keymap for the Kinesis Advantage 360 keyboard. 
Some configuration was taken from Urob's base keymap config: 
- https://github.com/urob/zmk-config/blob/main/config/base.keymap
*/

#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define NAV     1
#define NUM     2
#define FN      3
#define MOD     4

#define TAPPING_TERM 220
#define PRIOR_IDLE   175
#define QUICK_TAP    150

#define KEYS_LEFT   0  1  2  3  4  5  6 \
                   14 15 16 17 18 19 20 \
                   28 29 30 31 32 33 34 \
                   46 47 48 49 50 51 \
                   60 61 62 63 64
#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 55 56 57 58 59 \
                         71 72 73 74 75

#define THUMBS_LEFT  35 36 52 65 66 67
#define THUMBS_RIGHT 37 38 53 68 69 70

#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 70

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

// Layer-tap settings
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick_tap_ms = <175>;
};

// Mod-tap settings. Used by navigation combos.
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick_tap_ms = <220>;
    hold-trigger-key-positions = <0>;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS DEL BSPC>;
}; 

/ {
    macros {
        shift_tab: shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
              = <&macro_press &kp LSHIFT>
              , <&macro_tap &kp TAB>
              , <&macro_release &kp LSHIFT>
              ;
        };
    }; 
    combos {
        compatible = "zmk,combos";
        
        hml_ctrl_shift {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <31 32>;
            bindings = <&kp LC(LSHFT)>;
        };

        /* Horizontal combos - left hand */

        reverse-tab {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <16 17>;
            bindings = <&kp LS(TAB)>;
        };
        tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <17 18>;
            bindings = <&kp TAB>;
        };
        esc {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <30 31>;
            bindings = <&kp ESC>;
        };
        undo {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <47 48>;
            bindings = <&kp LC(Z)>;
        };

        /* Vertical combos - left hand */ 

        exclamation {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <15 29>;
            bindings = <&kp EXCL>;
        };
        hash {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <16 30>;
            bindings = <&kp HASH>;
        };
        at {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <17 31>;
            bindings = <&kp AT>;
        };
        dollar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <18 32>;
            bindings = <&kp DLLR>;
        };
        percent {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <19 33>;
            bindings = <&kp PRCNT>;
        };
        select-all {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <29 47>;
            bindings = <&kp LC(A)>;
        };
        cut {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <30 48>;
            bindings = <&kp LC(X)>;
        };
        copy {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <31 49>;
            bindings = <&kp LC(C)>;
        };
        paste {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <32 50>;
            bindings = <&kp LC(V)>;
        };
        bold {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <33 51>;
            bindings = <&kp LC(B)>;
        };

        /* Horizontal combos - right hand */

        bspc {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <23 24>;
            bindings = <&mt LC(BSPC) BSPC>;
        };
        del {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <24 25>;
            bindings = <&mt LC(DEL) DEL>;
        };
        pipe {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <40 41>;
            bindings = <&mm_pipe>;
        };
        quote {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 42>;
            bindings = <&kp SQT>;
        };
        lpar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <54 55>;
            bindings = <&mm_lparen>;
        };
        rpar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <55 56>;
            bindings = <&mm_rparen>;
        };

        /* Vertical combos - right hand */

        caret {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <22 40>;
            bindings = <&kp CARET>;
        };
        ampersand {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <23 41>;
            bindings = <&kp AMPS>;
        };
        minus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <24 42>;
            bindings = <&kp MINUS>;
        };
        plus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <25 43>;
            bindings = <&mm_plus>;
        };
        grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 55>;
            bindings = <&kp GRAVE>;
        };
        star {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <42 56>;
            bindings = <&kp STAR>;
        };
    };
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hpl LSHFT F>, <&tog NUM>;
        };

        tpl: tap_preferred_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        tpr: tap_preferred_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };
        
        hpl: hold_preferred_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        hpr: hold_preferred_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        cw: cap_word {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms = <125>;
            #binding-cells = <2>;
            bindings = <&caps_word>, <&kp>;
        };

        /* NAV cluster */

        nav_left: nav_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mm_home>, <&kp>;
        };
        nav_right: nav_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mm_end>, <&kp>;
        };

        // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
        mm_home: mm_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;
            mods = <(MOD_LCTL)>;
        };
        mm_end: mm_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;
            mods = <(MOD_LCTL)>;
        }; 

        mm_plus: mm_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>;
            mods = <(MOD_LSFT)>;
        };

        mm_pipe: mm_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BSLH>;
            mods = <(MOD_LSFT)>;
        };

        mm_lparen: mm_lparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&mm_lbracket>;
            mods = <(MOD_LSFT)>;
        };
        mm_lbracket: mm_lbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LBRC>;
            mods = <(MOD_LCTL)>;
        };
        
        mm_rparen: mm_rparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&mm_rbracket>;
            mods = <(MOD_LSFT)>;
        };
        mm_rbracket: mm_rbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RBRC>;
            mods = <(MOD_LCTL)>;
        };
    
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &none  &none        &none        &none         &none  &none   &none                                                                &mo MOD  &none  &none         &none         &none        &none           &none
                &none  &kp Q        &cw 0 W      &kp E         &kp R  &kp T   &none                                                                &none    &kp Y  &kp U         &kp I         &kp O        &kp P           &none
                &none  &tpl LGUI A  &tpl LALT S  &tpl LCTRL D  &td0   &kp G   &none           &none         &none    &none    &none                &none    &kp H  &hpr RSHFT J  &tpr RCTRL K  &tpr RALT L  &tpr RGUI SEMI  &none
                &none  &kp Z        &kp X        &kp C         &kp V  &kp B                                 &none    &none                                  &kp N  &kp M         &kp COMMA     &kp DOT      &kp FSLH        &none
                &none  &none        &none        &none         &none            &lt NAV BSPC  &lt FN ENTER  &kp DEL  &kp DEL  &lt FN ENTER  &lt NUM SPACE          &none         &none         &none        &none           &none
            >;
        }; 
        nav {
            bindings = <
                &trans  &trans  &trans  &trans     &trans     &trans  &none                                             &mo MOD  &trans            &trans            &trans           &trans              &trans  &trans
                &trans  &trans  &trans  &trans     &trans     &trans  &trans                                            &trans   &trans            &trans            &trans           &trans              &trans  &trans
                &trans  &trans  &trans  &trans     &trans     &trans  &trans       &trans  &trans  &trans  &trans       &trans   &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  &trans  &trans
                &trans  &trans  &trans  &kp PG_DN  &kp PG_UP  &trans                       &trans  &trans                        &trans            &trans            &trans           &trans              &trans  &trans
                &trans  &trans  &trans  &trans     &trans                  &trans  &trans  &trans  &trans  &trans  &trans                          &trans            &trans           &trans              &trans  &trans
            >;
        };
        num {
            bindings = <
                &trans  &trans        &trans        &trans         &trans         &trans  &none                                             &mo MOD  &trans  &trans         &trans         &trans        &trans        &trans
                &trans  &trans        &trans        &trans         &trans         &trans  &trans                                            &trans   &trans  &trans         &trans         &trans        &trans        &trans
                &trans  &tpl LGUI N1  &tpl LALT N2  &tpl LCTRL N3  &tpl LSHFT N4  &kp N5  &trans       &trans  &trans  &trans  &trans       &trans   &kp N6  &tpr RSHFT N7  &tpr RCTRL N8  &tpr RALT N9  &tpr RGUI N0  &trans
                &trans  &trans        &trans        &kp SPACE      &trans         &trans                       &trans  &trans                        &trans  &trans         &trans         &trans        &trans        &trans
                &trans  &trans        &trans        &trans         &trans                      &trans  &trans  &trans  &trans  &trans  &trans                &trans         &trans         &trans        &trans        &trans
            >;
        };
        fn {
            bindings = <
                &trans  &trans   &trans   &trans  &trans  &trans  &none                                             &mo MOD  &trans  &trans  &trans  &trans  &trans   &trans
                &trans  &trans   &trans   &trans  &trans  &trans  &trans                                            &trans   &trans  &trans  &trans  &trans  &trans   &trans
                &trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5  &trans       &trans  &trans  &trans  &trans       &trans   &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
                &trans  &kp F11  &kp F12  &trans  &trans  &trans                       &trans  &trans                        &trans  &trans  &trans  &trans  &trans   &trans
                &trans  &trans   &trans   &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans                &trans  &trans  &trans  &trans   &trans
            >;
        };
        mod {
            bindings = <
                &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                      &trans                  &none  &none       &none       &none  &none  &none
                &none &none        &none        &none        &none        &none        &bootloader                                                &bootloader             &none  &none       &none       &none  &none  &none
                &none &none        &none        &none        &none        &none        &trans          &none &none &bt BT_CLR &none               &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
                &none &none        &none        &none        &macro_ver   &none                              &none &none                                                  &none  &none       &none       &none  &none  &none
                &none &none        &none        &none        &none                               &none &none &none &none &bl BL_TOG &rgb_ug RGB_TOG                              &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};