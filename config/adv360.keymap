// -------------------------------------------------------------------------
// Program: adv360.keymap
// Description: Kinesis Advantage 360 Pro ZMK configuration with home row mods,
//              extensive combos, and optimized timing for fast typing
// Author: Greg Tate
// -------------------------------------------------------------------------

#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// -------------------------------------------------------------------------
// Layer Definitions
// -------------------------------------------------------------------------

#define DEFAULT    0
#define GAME       1
#define NUM        2
#define NAV        3
#define FN         4
#define ALTNAV     5
#define MOD        6

#define COMBOLAYERS DEFAULT NUM NAV FN ALTNAV

// -------------------------------------------------------------------------
// Special Key Definitions
// -------------------------------------------------------------------------

#define XXX &none
#define ___ &trans

// -------------------------------------------------------------------------
// Timing Constants
// -------------------------------------------------------------------------

#define TAPPING_TERM 220
#define HMR_TAPPING_TERM 220
#define PRIOR_IDLE   170
#define QUICK_TAP    150

// -------------------------------------------------------------------------
// Key Position Definitions
// -------------------------------------------------------------------------

#define KEYS_LEFT   0  1  2  3  4  5  6 \
                   14 15 16 17 18 19 20 \
                   28 29 30 31 32 33 34 \
                   46 47 48 49 50 51 \
                   60 61 62 63 64
#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 55 56 57 58 59 \
                         71 72 73 74 75

#define THUMBS_LEFT  35 36 52 65 66 67
#define THUMBS_RIGHT 37 38 53 68 69 70

// -------------------------------------------------------------------------
// Combo Timing Constants
// -------------------------------------------------------------------------

#define COMBO_TERM_FAST 15
#define COMBO_TERM_SLOW 250

// Larger idle time reduces accidental combos when typing fast
#define COMBO_IDLE_FAST 120
#define COMBO_IDLE_SLOW 250

// =========================================================================
// BEHAVIOR CONFIGURATIONS
// =========================================================================

// -------------------------------------------------------------------------
// Layer-tap settings
// -------------------------------------------------------------------------
&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick_tap_ms = <200>;
};

// -------------------------------------------------------------------------
// Mod-tap settings (used by navigation combos)
// -------------------------------------------------------------------------
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick_tap_ms = <220>;
    hold-trigger-key-positions = <0>;
};

// -------------------------------------------------------------------------
// Sticky-key settings
// -------------------------------------------------------------------------
&sk {
    release-after-ms = <900>;
    quick-release;              // no double capitalization when rolling keys
};

// -------------------------------------------------------------------------
// Caps Word settings
// -------------------------------------------------------------------------
&caps_word {
    continue-list = <UNDERSCORE MINUS DEL BSPC>;
};

/ {

    // =========================================================================
    // MACROS
    // =========================================================================

    macros {
        // ALT+TAB window switcher with ALTNAV layer for navigation
        alttab: alttab {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_press   &mo ALTNAV>
                , <&macro_press   &kp LALT>
                , <&macro_tap     &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_release &kp LALT>
                , <&macro_release &mo ALTNAV>
                ;
        };

        // Close window (ALT+DEL)
        close: close {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp DEL>
                , <&macro_release &kp LALT>
                ;
        };

        // Arrow operator (=>)
        arrow: arrow {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_tap   &kp EQUAL>
                , <&macro_tap   &kp GT>
                ;
        };

        // En dash (â€“) via Unicode
        endash: endash {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_tap     &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N3>
                , <&macro_press   &kp LALT>
                , <&macro_tap     &kp X>
                , <&macro_release &kp LALT>
                ;
        };
    };

    // =========================================================================
    // COMBOS
    // =========================================================================

    combos {
        compatible = "zmk,combos";

        // -------------------------------------------------------------------------
        // Modifier Combos
        // -------------------------------------------------------------------------

        // Left hand CTRL+SHIFT
        left-hand-control-shift {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <31 32>;
            bindings              = <&kp LC(LEFT_SHIFT)>;
            layers                = <COMBOLAYERS>;
        };

        // -------------------------------------------------------------------------
        // Left Hand - Horizontal Combos
        // -------------------------------------------------------------------------

        reverse-tab {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <16 17>;
            bindings              = <&kp LS(TAB)>;
            layers                = <COMBOLAYERS>;
        };

        tab {
            timeout-ms            = <12>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <17 18>;
            bindings              = <&kp TAB>;
            layers                = <COMBOLAYERS>;
        };

        // Hold for ALT+LCTRL, tap for ESC
        esc {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <200>;
            key-positions         = <30 31>;
            bindings              = <&esc_acl LA(LCTRL) ESC>;
            layers                = <COMBOLAYERS>;
        };

        undo {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <32 33>;
            bindings              = <&kp LC(Z)>;
            layers                = <COMBOLAYERS>;
        };

        del {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <48 49>;
            bindings              = <&mt LC(DEL) DEL>;
            layers                = <COMBOLAYERS>;
        };

        bspc {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <49 50>;
            bindings              = <&mt LC(BSPC) BSPC>;
            layers                = <COMBOLAYERS>;
        };

        // -------------------------------------------------------------------------
        // Left Hand - Vertical Combos (Symbols)
        // -------------------------------------------------------------------------

        exclamation {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <15 29>;
            bindings              = <&kp EXCL>;
            layers                = <COMBOLAYERS>;
        };

        percent {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <16 30>;
            bindings              = <&kp PRCT>;
            layers                = <COMBOLAYERS>;
        };

        at {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <17 31>;
            bindings              = <&kp AT>;
            layers                = <COMBOLAYERS>;
        };

        dollar {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <18 32>;
            bindings              = <&kp DLLR>;
            layers                = <COMBOLAYERS>;
        };

        hash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <19 33>;
            bindings              = <&kp HASH>;
            layers                = <COMBOLAYERS>;
        };

        // -------------------------------------------------------------------------
        // Left Hand - Vertical Combos (Editing Commands)
        // -------------------------------------------------------------------------

        select-all {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <29 47>;
            bindings              = <&kp LC(A)>;
            layers                = <COMBOLAYERS>;
        };

        cut {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <30 48>;
            bindings              = <&kp LC(X)>;
            layers                = <COMBOLAYERS>;
        };

        copy {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <31 49>;
            bindings              = <&kp LC(C)>;
            layers                = <COMBOLAYERS>;
        };

        paste {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <32 50>;
            bindings              = <&td_paste>;
            layers                = <COMBOLAYERS>;
        };

        bold {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <33 51>;
            bindings              = <&kp LC(B)>;
            layers                = <COMBOLAYERS>;
        };

        // -------------------------------------------------------------------------
        // Right Hand - Horizontal Combos (Brackets & Quotes)
        // -------------------------------------------------------------------------

        underscore {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <22 23>;
            bindings              = <&mm_under>;
            layers                = <COMBOLAYERS>;
        };

        left_bracket {
            timeout-ms            = <25>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <23 24>;
            bindings              = <&mm_lbracket>;
            layers                = <COMBOLAYERS>;
        };

        right_bracket {
            timeout-ms            = <25>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <24 25>;
            bindings              = <&mm_rbracket>;
            layers                = <COMBOLAYERS>;
        };

        left_angle {
            timeout-ms            = <25>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <23 24 25>;
            bindings              = <&mm_lt>;
            layers                = <COMBOLAYERS>;
        };

        double_quotes {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <40 41>;
            bindings              = <&kp DQT>;
            layers                = <COMBOLAYERS>;
        };

        // Hold for CTRL+SHIFT, tap for parenthesis
        lparen {
            timeout-ms            = <50>;
            require-prior-idle-ms = <20>;
            key-positions         = <41 42>;
            bindings              = <&lparen_csr RC(RIGHT_SHIFT) 0>;
            layers                = <COMBOLAYERS>;
        };

        // Hold for ALT+CTRL, tap for parenthesis
        rparen {
            timeout-ms            = <50>;
            require-prior-idle-ms = <20>;
            key-positions         = <42 43>;
            bindings              = <&rparen_csr RA(RIGHT_CONTROL) 0>;
            layers                = <COMBOLAYERS>;
        };

        right_angle {
            timeout-ms            = <25>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <41 42 43>;
            bindings              = <&mm_gt>;
            layers                = <COMBOLAYERS>;
        };

        quote {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <100>;
            key-positions         = <54 55>;
            bindings              = <&kp SQT>;
            layers                = <COMBOLAYERS>;
        };

        lbrace {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <20>;
            key-positions         = <55 56>;
            bindings              = <&mm_lbrace>;
            layers                = <COMBOLAYERS>;
        };

        rbrace {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <56 57>;
            bindings              = <&mm_rbrace>;
            layers                = <COMBOLAYERS>;
        };

        // -------------------------------------------------------------------------
        // Right Hand - Vertical Combos (Operators)
        // -------------------------------------------------------------------------

        star {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <22 40>;
            bindings              = <&kp STAR>;
            layers                = <COMBOLAYERS>;
        };

        plus {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <23 41>;
            bindings              = <&kp PLUS>;
            layers                = <COMBOLAYERS>;
        };

        equal {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <24 42>;
            bindings              = <&kp EQUAL>;
            layers                = <COMBOLAYERS>;
        };

        ampersand {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <25 43>;
            bindings              = <&kp AMPS>;
            layers                = <COMBOLAYERS>;
        };

        caret {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <26 44>;
            bindings              = <&kp CARET>;
            layers                = <COMBOLAYERS>;
        };

        grave {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <40 54>;
            bindings              = <&kp GRAVE>;
            layers                = <COMBOLAYERS>;
        };

        minus {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <41 55>;
            bindings              = <&mm_minus>;
            layers                = <COMBOLAYERS>;
        };

        slash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <42 56>;
            bindings              = <&kp SLASH>;
            layers                = <COMBOLAYERS>;
        };

        pipe {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <43 57>;
            bindings              = <&kp PIPE>;
            layers                = <COMBOLAYERS>;
        };

        backslash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            key-positions         = <44 58>;
            bindings              = <&mm_bslh>;
            layers                = <COMBOLAYERS>;
        };
    };

    // =========================================================================
    // BEHAVIORS
    // =========================================================================

    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        // -------------------------------------------------------------------------
        // Tap Dances
        // -------------------------------------------------------------------------

        // Paste: single tap = CTRL+V, double tap = CTRL+SHIFT+V
        td_paste: tap_dance_paste {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&kp LC(V)>, <&kp LS(LC(V))>;
        };

        // -------------------------------------------------------------------------
        // Home Row Mods - Left Hand
        // -------------------------------------------------------------------------

        // F key - hold-preferred for better modifier activation
        hmlf: home_row_mod_left_f {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "hold-preferred";
            tapping-term-ms            = <280>;
            require-prior-idle-ms      = <170>;
            quick-tap-ms               = <5>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_RIGHT 17>;
            hold-trigger-on-release;
        };

        // Standard home row mod for left hand (D, S, A keys)
        hml: home_row_mod_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "balanced";
            tapping-term-ms            = <280>;
            require-prior-idle-ms      = <170>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_RIGHT 17>;
            hold-trigger-on-release;
        };

        // Tap-preferred variant for A key
        tml: home_row_mod_left_tap {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <280>;
            require-prior-idle-ms      = <200>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_RIGHT 17>;
            hold-trigger-on-release;
        };

        // -------------------------------------------------------------------------
        // Home Row Mods - Right Hand
        // -------------------------------------------------------------------------

        // J key - hold-preferred for better modifier activation
        hmrj: home_row_mod_right_j {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "hold-preferred";
            tapping-term-ms            = <280>;
            require-prior-idle-ms      = <250>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // Standard home row mod for right hand (K, L, ; keys)
        hmr: home_row_mod_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "balanced";
            tapping-term-ms            = <280>;
            require-prior-idle-ms      = <250>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // -------------------------------------------------------------------------
        // Special Hold-Tap Behaviors
        // -------------------------------------------------------------------------

        // Left parenthesis with CTRL+SHIFT hold option
        lparen_csr: lparen_control_shift_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&mm_lparen>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // Right parenthesis with ALT+CTRL hold option
        rparen_csr: rparen_control_shift_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&mm_rparen>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <100>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // Double quote with ALT+SHIFT hold option
        dblquote_asr: double_quote_alt_shift_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // ESC with ALT+CTRL hold option
        esc_acl: esc_alt_ctrl_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        // Mod-tap for shift (hold for modifier, tap for sticky key)
        mts: mod_tap_shift {
            compatible            = "zmk,behavior-hold-tap";
            #binding-cells        = <2>;
            flavor                = "hold-preferred";
            tapping-term-ms       = <TAPPING_TERM>;
            quick-tap-ms          = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings              = <&kp>, <&sk>;
        };

        // Layer-tap for shift (hold for layer, tap for sticky shift)
        lts: layer_tap_shift {
            compatible            = "zmk,behavior-hold-tap";
            #binding-cells        = <2>;
            flavor                = "hold-preferred";
            tapping-term-ms       = <TAPPING_TERM>;
            quick-tap-ms          = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings              = <&mo>, <&sk>;
        };

        // ALT+TAB behavior (hold for alt-tab switcher, tap for key)
        atb: alt_tab {
            compatible            = "zmk,behavior-hold-tap";
            #binding-cells        = <2>;
            flavor                = "hold-preferred";
            tapping-term-ms       = <TAPPING_TERM>;
            quick-tap-ms          = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings              = <&alttab>, <&kp>;
        };

        // -------------------------------------------------------------------------
        // Navigation Behaviors
        // -------------------------------------------------------------------------

        // Left arrow with HOME hold option
        nav_left: nav_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <220>;
            quick-tap-ms               = <220>;
            hold-trigger-key-positions = <0>;
            bindings                   = <&mm_home>, <&kp>;
        };

        // Right arrow with END hold option
        nav_right: nav_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <220>;
            quick-tap-ms               = <220>;
            hold-trigger-key-positions = <0>;
            bindings                   = <&mm_end>, <&kp>;
        };

        // =========================================================================
        // MOD MORPHS
        // =========================================================================

        // -------------------------------------------------------------------------
        // Punctuation Mod Morphs
        // -------------------------------------------------------------------------

        // Minus (prevents shift from changing output)
        mm_minus: mm_minus {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp MINUS>, <&kp MINUS>;
            mods           = <(MOD_LSFT)>;
        };

        // Underscore (prevents shift from changing output)
        mm_under: mm_under {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp UNDER>, <&kp UNDER>;
            mods           = <(MOD_LSFT)>;
        };

        // Comma (prevents shift from changing output)
        mm_comma: mm_comma {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp COMMA>, <&kp COMMA>;
            mods           = <(MOD_LSFT)>;
        };

        // Period (prevents shift from changing output)
        mm_dot: mm_dot {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp DOT>, <&kp DOT>;
            mods           = <(MOD_LSFT)>;
        };

        // Colon (prevents shift from changing output)
        mm_colon: mm_colon {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp COLON>, <&kp COLON>;
            mods           = <(MOD_LSFT)>;
        };

        // Double quote (prevents shift from changing output)
        mm_dqt: mm_dqt {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp DQT>, <&kp DQT>;
            mods           = <(MOD_LSFT)>;
        };

        // Backslash (prevents shift from changing output)
        mm_bslh: mm_bslh {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp BSLH>, <&kp BSLH>;
            mods           = <(MOD_LSFT)>;
        };

        // -------------------------------------------------------------------------
        // Bracket & Parenthesis Mod Morphs
        // -------------------------------------------------------------------------

        // Left parenthesis (prevents shift from changing output)
        mm_lparen: mm_lparen {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LPAR>, <&kp LPAR>;
            mods           = <(MOD_LSFT)>;
        };

        // Right parenthesis (prevents shift from changing output)
        mm_rparen: mm_rparen {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RPAR>, <&kp RPAR>;
            mods           = <(MOD_LSFT)>;
        };

        // Greater than (prevents shift from changing output)
        mm_gt: mm_greater_than {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp GT>, <&kp GT>;
            mods           = <(MOD_LSFT)>;
        };

        // Less than (prevents shift from changing output)
        mm_lt: mm_less_than {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LT>, <&kp LT>;
            mods           = <(MOD_LSFT)>;
        };

        // Left brace (with shift pressed, outputs left bracket)
        mm_lbrace: mm_lbrace {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LBRC>, <&kp LBKT>;
            mods           = <(MOD_LSFT)>;
        };

        // Left bracket (prevents shift from changing output)
        mm_lbracket: mm_lbracket {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LBKT>, <&kp LBKT>;
            mods           = <(MOD_LSFT)>;
        };

        // Right brace (with shift pressed, outputs right bracket)
        mm_rbrace: mm_rbrace {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RBRC>, <&kp RBKT>;
            mods           = <(MOD_LSFT)>;
        };

        // Right bracket (prevents shift from changing output)
        mm_rbracket: mm_rbracket {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RBKT>, <&kp RBKT>;
            mods           = <(MOD_LSFT)>;
        };

        // -------------------------------------------------------------------------
        // Navigation Mod Morphs
        // -------------------------------------------------------------------------

        // HOME (masks CTRL to avoid accidental document-level jumps)
        mm_home: mm_home {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp HOME>, <&kp HOME>;
            mods           = <(MOD_LCTL)>;
        };

        // END (masks CTRL to avoid accidental document-level jumps)
        mm_end: mm_end {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp END>, <&kp END>;
            mods           = <(MOD_LCTL)>;
        };

        // -------------------------------------------------------------------------
        // Number Row Mod Morphs (prevent shift from changing output)
        // -------------------------------------------------------------------------

        mm_1: mm_1 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N1>, <&kp N1>;
            mods           = <(MOD_LSFT)>;
        };

        mm_2: mm_2 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N2>, <&kp N2>;
            mods           = <(MOD_LSFT)>;
        };

        mm_3: mm_3 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N3>, <&kp N3>;
            mods           = <(MOD_LSFT)>;
        };

        mm_4: mm_4 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N4>, <&kp N4>;
            mods           = <(MOD_LSFT)>;
        };

        mm_5: mm_5 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N5>, <&kp N5>;
            mods           = <(MOD_LSFT)>;
        };

        mm_6: mm_6 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N6>, <&kp N6>;
            mods           = <(MOD_LSFT)>;
        };

        mm_7: mm_7 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N7>, <&kp N7>;
            mods           = <(MOD_LSFT)>;
        };

        mm_8: mm_8 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N8>, <&kp N8>;
            mods           = <(MOD_LSFT)>;
        };

        mm_9: mm_9 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N9>, <&kp N9>;
            mods           = <(MOD_LSFT)>;
        };

        mm_0: mm_0 {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp N0>, <&kp N0>;
            mods           = <(MOD_LSFT)>;
        };
    };

    // =========================================================================
    // KEYMAP
    // =========================================================================

    keymap {
        compatible = "zmk,keymap";

        // -------------------------------------------------------------------------
        // Layer 0: DEFAULT
        // -------------------------------------------------------------------------
        default {
            bindings = <
                XXX        &mm_1        &mm_2        &mm_3         &mm_4          &mm_5  XXX                                                                                  &mo MOD  &mm_6   &mm_7         &mm_8         &mm_9        &mm_0					  &tog GAME
                &kp TAB    &kp Q        &kp W				 &kp E         &kp R          &kp T  XXX                                                                                  XXX      &kp Y   &kp U         &kp I         &kp O        &kp P				    XXX
                &kp ENTER  &tml LGUI A  &hml LALT S  &hml LCTRL D  &hmlf LSHFT F  &kp G  XXX                 XXX            XXX         XXX  		XXX														XXX			 &kp H   &hmrj RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &kp ENTER 
                XXX			   &kp Z        &kp X        &kp C         &kp V          &kp B                                     XXX         XXX			     													  			 &kp N   &kp M    	   &mm_comma     &mm_dot      &kp FSLH			  XXX
							  XXX      	 XXX          XXX          XXX           XXX                        &lt NAV SPACE  &lts FN LSHFT  &atb 0 DEL  &kp DEL  &mts LSHFT LSHFT  &lt NUM SPACE				  	   XXX           XXX           XXX          XXX					    XXX
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 1: GAME
        // -------------------------------------------------------------------------
        game {
            bindings = <
                &kp ESC    &kp N1  &kp N2  &kp N3   &kp N4  &kp N5  ___                                                                   &mo MOD  ___    ___     &kp N8     &kp N9    &kp N0    ___
                &kp TAB    &kp Q   &kp W   &kp E    &kp R   &kp T   &kp I                                                                 &none    &kp Y  &kp U   &kp I      &kp O     &kp P     &kp BSLH
                &kp CAPS   &kp A   &kp S   &kp D    &kp F   &kp G   &kp M            &kp LALT    &kp TAB    &kp LGUI  &kp RCTRL           &none    &kp H  &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
                &kp LSHFT  &kp Z   &kp X   &kp C    &kp V   &kp B                                XXX        &kp PG_UP                              &kp N  &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                &kp DEL    XXX     XXX     XXX      XXX                    &kp SPACE &kp LSHIFT  &kp LCTRL  &kp PG_DN &kp ENTER &kp SPACE                 &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 2: NUM (Number Layer)
        // -------------------------------------------------------------------------
        num {
            bindings = <
                ___  ___    ___    ___    ___    ___  XXX                                &mo MOD  ___  ___  ___  ___  ___        ___
                ___  ___    &mm_7  &mm_8  &mm_9  ___  ___                                ___      ___  ___  ___  ___  ___  			 ___
                ___  &mm_0  &mm_4  &mm_5  &mm_6  ___  ___       ___  ___  ___  ___       ___      ___  ___  ___  ___  &mm_colon  ___
                ___  ___    &mm_1  &mm_2  &mm_3  ___                 ___  ___                     ___  ___  ___  ___  ___        ___
                ___  ___    ___    ___    ___              ___  ___  ___  ___  ___  ___                ___  ___  ___  ___  			 ___
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 3: NAV (Navigation Layer)
        // -------------------------------------------------------------------------
        nav {
            bindings = <
                ___  ___    			 ___    			 ___     				___    				 ___  XXX                                &mo MOD  ___               ___               ___              ___                 ___  ___
                ___  ___    			 &kp N7  			 &kp N8  				&kp N9  			 ___  ___                 							 ___      ___               ___      					___              ___                 ___  ___
                ___  &tml LGUI N0  &hml LALT N4  &hml LCTRL N5  &hml LSHFT N6  ___  ___       ___  ___  ___  ___       ___      &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  ___  ___
                ___  ___    			 &kp N1    	   &kp N2  				&kp N3  			 ___                 ___  ___                     ___ 							&kp PG_UP         &kp PG_DN        ___                 ___  ___
                ___  ___    			 ___    			 ___    				___              				 ___  ___  ___  ___  ___  ___                             ___               ___              ___                 ___  ___
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 4: FN (Function Keys Layer)
        // -------------------------------------------------------------------------
        fn {
            bindings = <
                ___  ___      ___     ___     ___     ___  XXX                                 &mo MOD  ___  ___	___  ___  ___  ___
                ___  &kp F12  &kp F7  &kp F8  &kp F9  ___  ___                                 ___      ___  ___  ___  ___  ___  ___
                ___  &kp F11  &kp F4  &kp F5  &kp F6  ___  ___       ___  ___  ___  ___        ___      ___  ___  ___  ___  ___  ___
                ___  &kp F10  &kp F1  &kp F2  &kp F3  ___                 ___  ___                      ___  ___  ___  ___  ___  ___
                ___  ___      ___     ___     ___               ___  ___  ___  ___  ___  ___                 ___  ___  ___  ___  ___
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 5: ALTNAV (Alt-Tab Navigation Layer)
        // -------------------------------------------------------------------------
        altnav {
            bindings = <
                ___  ___  ___               ___     ___                 ___  XXX                                &mo MOD  ___               ___               ___              ___                 ___  ___
                ___  ___  ___               ___     ___                 ___  ___                                ___      ___               ___               ___              ___                 ___  ___
                ___  ___  &nav_left 0 LEFT  &close  &nav_right 0 RIGHT  ___  ___       ___  ___  ___  ___       ___      &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  ___  ___
                ___  ___  ___  							___     ___  							  ___                 ___  ___                     ___               &kp PG_UP         &kp PG_DN        ___                 ___  ___
                ___  ___  ___               ___     ___                           ___  ___  ___  ___  ___  ___                             ___               ___              ___                 ___  ___
            >;
        };

        // -------------------------------------------------------------------------
        // Layer 6: MOD (System/Modifier Layer)
        // -------------------------------------------------------------------------
        mod {
            bindings = <
                XXX &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 XXX                                                       ___                     XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          &bootloader                                               &bootloader             XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          ___          XXX XXX &bt BT_CLR  XXX                      &rgb_ug RGB_MEFS_CMD 5  XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          &macro_ver   XXX                           XXX XXX                                                          XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX                                XXX XXX XXX XXX         &bl BL_TOG &rgb_ug RGB_TOG                            &bl BL_INC  &bl BL_DEC  XXX  XXX  XXX
            >;
        };
    };
};