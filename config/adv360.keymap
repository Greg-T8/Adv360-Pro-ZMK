/*

This is my keymap for the Kinesis Advantage 360 keyboard. 
Some configuration was taken from Urob's base keymap config: 
- https://github.com/urob/zmk-config/blob/main/config/base.keymap
*/

#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define NAV     1
#define FN      2
#define MOD     3

#define TAPPING_TERM 200
#define PRIOR_IDLE 175
#define QUICK_TAP 175

#define KEYS_LEFT   0  1  2  3  4  5  6 \
                   14 15 16 17 18 19 20 \
                   28 29 30 31 32 33 34 \
                   46 47 48 49 50 51 \
                   60 61 62 63 64
#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 55 56 57 58 59 \
                         71 72 73 74 75

#define THUMBS_LEFT 35 36 52 65 66 67
#define THUMBS_RIGHT 37 38 53 68 69 70

#define COMBO_TERM_FAST 50
#define COMBO_TERM_SLOW 70

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

// Layer-tap settings
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick_tap_ms = <175>;
};

// Mod-tap settings. Used by navigation combos.
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick_tap_ms = <220>;
    hold-trigger-key-positions = <0>;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS>;
}; 

/ {
    macros {
        shift_tab: shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
              = <&macro_press &kp LSHIFT>
              , <&macro_tap &kp TAB>
              , <&macro_release &kp LSHIFT>
              ;
        };
    }; 
    combos {
        compatible = "zmk,combos";
        nav_layer {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <65 66>;
            bindings = <&lt NAV 0>;
        };
        hml_ctrl_shift {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <31 32>;
            bindings = <&kp LC(LSHFT)>;
        };

        /* Horizontal combos - left hand */

        undo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <17 18>;
            bindings = <&kp LC(Z)>;
        };
        esc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <31 32>;
            bindings = <&kp ESC>;
        };
        lpar {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <49 50>;
            bindings = <&kp LPAR>;
        };
        rpar {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <50 51>;
            bindings = <&kp RPAR>;
        };

        /* Vertical combos - left hand */ 

        exclamation {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <15 29>;
            bindings = <&kp EXCL>;
        };
        at {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <16 30>;
            bindings = <&kp AT>;
        };
        hash {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <17 31>;
            bindings = <&kp HASH>;
        };
        dollar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <18 32>;
            bindings = <&kp DLLR>;
        };
        percent {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <19 33>;
            bindings = <&kp PRCNT>;
        };
        select-all {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <29 47>;
            bindings = <&kp LC(A)>;
        };
        cut {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <30 48>;
            bindings = <&kp LC(X)>;
        };
        copy {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <31 49>;
            bindings = <&kp LC(C)>;
        };
        paste {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <32 50>;
            bindings = <&kp LC(V)>;
        };
        bold {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <33 51>;
            bindings = <&kp LC(B)>;
        };

        /* Horizontal combos - right hand */

        NAV_BSPC {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <22 23>;
            bindings = <&mt LC(BSPC) BSPC>;
        };
        NAV_DEL {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <23 24>;
            bindings = <&mt LC(DEL) DEL>;
        };
        pipe {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 42>;
            bindings = <&kp PIPE>;
        };
        left_bracket {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <54 55>;
            bindings = <&kp LBKT>;
        };
        right_bracket {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <55 56>;
            bindings = <&kp RBKT>;
        };

        /* Vertical combos - right hand */

        caret {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <22 40>;
            bindings = <&kp CARET>;
        };
        ampersand {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <23 41>;
            bindings = <&kp AMPS>;
        };
        minus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <24 42>;
            bindings = <&kp MINUS>;
        };
        plus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <25 43>;
            bindings = <&mt_plus>;
        };
        grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 55>;
            bindings = <&kp GRAVE>;
        };
        star {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <42 56>;
            bindings = <&kp STAR>;
        };
    };
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        cw: cap_word {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms = <125>;
            #binding-cells = <2>;
            bindings = <&caps_word>, <&kp>;
        };

        /* NAV cluster */

        nav_left: nav_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mt_home>, <&kp>;
        };
        nav_right: nav_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mt_end>, <&kp>;
        };

        // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
        mt_home: mt_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;
            mods = <(MOD_LCTL)>;
        };
        mt_end: mt_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;
            mods = <(MOD_LCTL)>;
        };
        mt_plus: mt_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>;
            mods = <(MOD_LSFT)>;
        };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none      &kp N1       &kp N2       &kp N3        &kp N4        &kp N5  &kp N6                                                                &mo MOD  &kp N6  &kp N7        &kp N8        &kp N9       &kp N0          &kp MINUS
        &kp TAB    &kp Q        &cw 0 W      &kp E         &kp R         &kp T   &none                                                                &none    &kp Y   &kp U         &kp I         &kp O        &kp P           &kp BSLH
        &kp ESC    &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G   &none           &none         &none    &none    &none                &none    &kp H   &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &kp SQT
        &kp LSHFT  &kp Z        &kp X        &kp C         &kp V         &kp B                                 &none    &none                                  &kp N   &kp M         &kp COMMA     &kp DOT      &kp FSLH        &kp RSHFT
        &kp CAPS   &none        &none        &none         &none                   &lt NAV BSPC  &lt FN ENTER  &kp DEL  &kp DEL  &lt FN ENTER  &kp SPACE               &none         &none         &none        &none           &none
      >;
    }; 
    nav {
      bindings = <
        &trans  &trans  &trans  &trans     &trans      &trans  &none                                             &mo MOD  &trans            &trans            &trans           &trans              &trans  &trans
        &trans  &trans  &trans  &trans     &trans      &trans  &trans                                            &trans   &none             &trans            &kp PG_UP        &none               &trans  &trans
        &trans  &trans  &trans  &kp LCTRL  &kp LSHFT   &trans  &trans       &trans  &trans  &trans  &trans       &trans   &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  &trans  &trans
        &trans  &trans  &trans  &trans     &trans      &trans                       &trans  &trans                        &none             &trans            &kp PG_DN        &none               &trans  &trans
        &trans  &trans  &trans  &trans     &trans                   &trans  &trans  &trans  &trans  &trans  &trans                          &trans            &trans           &trans              &trans  &trans
      >;
    };
    fn {
      bindings = <
        &trans  &trans   &trans   &trans  &trans  &trans  &none                                             &mo MOD  &trans  &trans  &trans  &trans  &trans   &trans
        &trans  &trans   &trans   &trans  &trans  &trans  &trans                                            &trans   &trans  &trans  &trans  &trans  &trans   &trans
        &trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5  &kp F6       &trans  &trans  &trans  &trans       &trans   &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
        &trans  &kp F11  &kp F12  &trans  &trans  &trans                       &trans  &trans                        &trans  &trans  &trans  &trans  &trans   &trans
        &trans  &trans   &trans   &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans                &trans  &trans  &trans  &trans   &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                      &trans                  &none  &none       &none       &none  &none  &none
        &none &none        &none        &none        &none        &none        &bootloader                                                &bootloader             &none  &none       &none       &none  &none  &none
        &none &none        &none        &none        &none        &none        &trans          &none &none &bt BT_CLR &none               &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
        &none &none        &none        &none        &macro_ver   &none                              &none &none                                                  &none  &none       &none       &none  &none  &none
        &none &none        &none        &none        &none                               &none &none &none &none &bl BL_TOG &rgb_ug RGB_TOG                              &bl BL_INC  &bl BL_DEC  &none  &none  &none
      >;
    };
  };
};