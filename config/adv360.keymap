#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define NUM     1
#define NAV     2
#define FN      3
#define MOD     4

#define TAPPING_TERM 280
#define TAPPING_TERM_FAST 200
#define PRIOR_IDLE 150
#define QUICK_TAP 175

#define KEYS_LEFT 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  60 61 62 63 64

#define KEYS_RIGHT 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   54 55 56 57 58 59 \
                   71 72 73 74 75

#define THUMBS_LEFT 35 36 52 65 66 67

#define THUMBS_RIGHT 37 38 53 68 69 70

#define COMBO_TERM_FAST 50
#define COMBO_TERM_SLOW 70

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <175>;
};

&sk {
    quick-release;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    macros {
        shift_tab: shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
              = <&macro_press &kp LSHIFT>
              , <&macro_tap &kp TAB>
              , <&macro_release &kp LSHIFT>
              ;
        };
    }; 
    combos {
        compatible = "zmk,combos";
        nav_layer {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <65 66>;
            bindings = <&lt NAV 0>;
        };
        hml_ctrl_shift {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <31 32>;
            bindings = <&kp LC(LSHFT)>;
        };

        /* Horizontal combos - left hand */

        tilde {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <15 16>;
            bindings = <&kp TILDE>;
        };
        tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
           key-positions = <16 17>;
            bindings = <&kp ESC>;
        };
        esc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <30 31>;
            bindings = <&kp ESC>;
        };
        grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <47 48>;
            bindings = <&kp GRAVE>;
        };
        delete {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <48 49>;
            bindings = <&kp DEL>;
        };
        backspace {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <49 50>;
            bindings = <&kp BSPC>;
        };

        /* Vertical combos - left hand */ 

        exclamation {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <15 29>;
            bindings = <&kp EXCL>;
        };
        at {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <16 30>;
            bindings = <&kp AT>;
        };
        hash {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <17 31>;
            bindings = <&kp HASH>;
        };
        dollar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <18 32>;
            bindings = <&kp DLLR>;
        };
        percent {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <19 33>;
            bindings = <&kp PRCNT>;
        };
        caret {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <20 34>;
            bindings = <&kp CARET>;
        };
        select-all {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <29 47>;
            bindings = <&kp LC(A)>;
        };
        cut {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <30 48>;
            bindings = <&kp LC(X)>;
        };
        copy {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <31 49>;
            bindings = <&kp LC(C)>;
        };
        paste {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <32 50>;
            bindings = <&kp LC(V)>;
        };
        bold {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <33 51>;
            bindings = <&kp LC(B)>;
        };

        /* Horizontal combos - right hand */

        left_paren {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 42>;
            bindings = <&kp LPAR>;
        };
        right_paren {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <42 43>;
            bindings = <&kp RPAR>;
        };
        left_bracket {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <55 56>;
            bindings = <&kp LBKT>;
        };
        right_bracket {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <56 57>;
            bindings = <&kp RBKT>;
        };
        underscore {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <57 58>;
            bindings = <&kp UNDERSCORE>;
        }; 

        /* Vertical combos - right hand */

        ampersand {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <23 41>;
            bindings = <&kp AMPS>;
        };
        minus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <24 42>;
            bindings = <&kp MINUS>;
        };
        plus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <25 43>;
            bindings = <&kp PLUS>;
        }; 
        backslash {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <26 44>;
            bindings = <&kp BSLH>;
        };
        star {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <42 57>;
            bindings = <&kp STAR>;
        };
        equal {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <43 58>;
            bindings = <&kp EQUAL>;
        };
        pipe {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <44 59>;
            bindings = <&kp PIPE>;
        };
    };
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        cw: cap_word {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms = <125>;
            #binding-cells = <2>;
            bindings = <&caps_word>, <&kp>;
        };
    
        nd: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NUM>, <&tog NUM>;
            tapping-term-ms = <TAPPING_TERM>;
        };

        sn: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            bindings = <&mo>, <&nd>;
        };

        wd: word_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            tapping-term-ms = <TAPPING_TERM>;
        };

        ss: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            bindings = <&kp>, <&wd>;
        };

    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp F5     &kp N1       &kp N2       &kp N3        &kp N4        &kp N5  &kp N6                                                                &mo MOD  &kp N6  &kp N7        &kp N8        &kp N9       &kp N0          &kp MINUS
        &kp TAB    &kp Q        &cw 0 W      &kp E         &kp R         &kp T   &none                                                                 &none    &kp Y   &kp U         &kp I         &kp O        &kp P           &kp BSLH
        &kp ESC    &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G   &none            &none         &none  &none  &none                    &none    &kp H   &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L  &hmr RGUI SEMI  &kp SQT
        &sk LSHFT  &kp Z        &kp X        &kp C         &kp V         &kp B                                  &none  &none                                   &kp N   &kp M         &kp COMMA     &kp DOT      &kp FSLH        &sk RSHFT
        &kp CAPS   &none        &none        &none         &none                   &lt NAV SPACE  &lt FN ENTER  &none  &none  &sn NUM 0 &ss SPACE 0                 &none         &none         &none        &none           &none
      >;
    };
    num {
      bindings = <
        &trans  &trans        &trans        &trans         &trans         &trans     &none                                                 &mo MOD  &trans     &trans         &trans         &trans        &trans        &trans
        &trans  &kp EXCL      &kp AT        &kp HASH       &kp DLLR       &kp PRCNT  &kp CARET                                             &trans   &kp LBKT   &kp AMPS       &kp STAR       &kp LPAR      &kp RPAR      &trans
        &trans  &hml LGUI N1  &hml LALT N2  &hml LSHFT N3  &hml LCTRL N4  &kp N5     &kp N6          &trans  &trans  &trans  &trans        &trans   &kp GRAVE  &hmr RCTRL N7  &hmr RSHFT N8  &hmr RALT N9  &hmr RGUI N0  &trans
        &trans  &trans        &kp TILDE     &kp EQUAL      &kp PLUS       &trans                             &trans  &trans                         &kp RBKT   &kp MINUS      &trans         &trans        &trans        &trans
        &trans  &trans        &trans        &trans         &trans                           &trans  &trans  &trans  &kp BSPC  &trans  &trans                   &trans         &trans         &trans        &trans        &trans
      >;
    };
    nav {
      bindings = <
        &trans  &trans  &trans  &trans     &trans      &trans  &none                                             &mo MOD  &trans    &trans     &trans     &trans     &trans    &trans
        &trans  &trans  &trans  &trans     &trans      &trans  &trans                                            &trans   &none     &kp PG_UP  &kp HOME   &none      &trans    &trans
        &trans  &trans  &trans  &kp LSHFT  &kp LCTRL   &trans  &trans       &trans  &trans  &trans  &trans       &trans   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans    &trans
        &trans  &trans  &trans  &trans     &trans      &trans                       &trans  &trans                        &none     &kp PG_DN  &kp END    &none      &trans    &trans
        &trans  &trans  &trans  &trans     &trans                   &trans  &trans  &trans  &trans  &trans  &trans                  &trans     &trans     &trans     &trans    &trans
      >;
    };
    fn {
      bindings = <
        &trans  &trans   &trans  &trans  &trans  &trans  &none                                            &mo MOD  &trans  &trans   &trans   &trans  &trans   &trans
        &trans  &trans   &trans  &trans  &trans  &trans  &trans                                           &trans   &trans  &trans   &trans   &trans  &trans   &trans
        &trans  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5  &kp F6       &trans  &trans  &trans  &trans      &trans   &trans  &kp F7   &kp F8   &kp F9  &kp F10  &trans
        &trans  &trans   &trans  &trans  &trans  &trans                       &trans  &trans                       &trans  &kp F11  &kp F12  &trans  &trans   &trans
        &trans  &trans   &trans  &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans               &trans   &trans   &trans  &trans   &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &trans                  &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none &bl BL_TOG &rgb_ug RGB_TOG                                          &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
  };
};