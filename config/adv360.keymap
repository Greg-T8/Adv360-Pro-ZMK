#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT    0
#define GAME       1
#define WT         2
#define NUM        3
#define NAV        4
#define FN         5
#define MOD        6

#define COMBOLAYERS DEFAULT NAV FN NUM

#define XXX &none
#define ___ &trans

#define TAPPING_TERM 220
#define HMR_TAPPING_TERM 220
#define PRIOR_IDLE   170
#define QUICK_TAP    150

#define KEYS_LEFT   0  1  2  3  4  5  6 \
                   14 15 16 17 18 19 20 \
                   28 29 30 31 32 33 34 \
                   46 47 48 49 50 51 \
                   60 61 62 63 64
#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 55 56 57 58 59 \
                         71 72 73 74 75

#define THUMBS_LEFT  35 36 52 65 66 67
#define THUMBS_RIGHT 37 38 53 68 69 70

#define COMBO_TERM_FAST 15
#define COMBO_TERM_SLOW 200

// Larger idle time reduces accidental combos when typing fast
#define COMBO_IDLE_FAST 120
#define COMBO_IDLE_SLOW 220

// Layer-tap settings
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick_tap_ms = <175>;
};

// Mod-tap settings. Used by navigation combos.
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick_tap_ms = <220>;
    hold-trigger-key-positions = <0>;
};

// Sticky-key settings
&sk {
    release-after-ms = <900>;
    quick-release;              // no double capitalization when rolling keys
};

&caps_word {
    continue-list = <UNDERSCORE MINUS DEL BSPC>;
};

/ {

    macros {

        alt-tab: alt-tab {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp TAB>
                ;
        };

        endash: endash {
            compatible     = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms  = <40>;
            bindings
                = <&macro_tap     &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N3>
                , <&macro_press   &kp LALT>
                , <&macro_tap     &kp X>
                , <&macro_release &kp LALT>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";

        left-hand-control-shift {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <31 32>;
            bindings              = <&kp LC(LEFT_SHIFT)>;
            layers                = <COMBOLAYERS>;
        };
        left-hand-num-layer-activation {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <65 66>;
            bindings              = <&mo NUM>;
            layers                = <COMBOLAYERS>;
        };


        /* Horizontal combos - left hand */

        reverse-tab {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <16 17>;
            bindings              = <&kp LS(TAB)>;
            layers                = <COMBOLAYERS>;
        };
        tab {
            timeout-ms            = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <17 18>;
            bindings              = <&kp TAB>;
            layers                = <COMBOLAYERS>;
        };

        // Hold for ALT+LCTRL, tap for ESC
        esc {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <30 31>;
            bindings              = <&esc_acl LA(LCTRL) ESC>;
            layers                = <COMBOLAYERS>;
        };

        undo {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <32 33>;
            bindings              = <&kp LC(Z)>;
            layers                = <COMBOLAYERS>;
        };
        del {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <48 49>;
            bindings              = <&mt LC(DEL) DEL>;
            layers                = <COMBOLAYERS>;
        };
        bspc {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <49 50>;
            bindings              = <&mt LC(BSPC) BSPC>;
            layers                = <COMBOLAYERS>;
        };


        /* Vertical combos - left hand */

        exclamation {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <15 29>;
            bindings              = <&kp EXCL>;
            layers                = <COMBOLAYERS>;
        };
        percent {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <16 30>;
            bindings              = <&kp PRCNT>;
            layers                = <COMBOLAYERS>;
        };
        at {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <17 31>;
            bindings              = <&kp AT>;
            layers                = <COMBOLAYERS>;
        };
        dollar {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <18 32>;
            bindings              = <&kp DLLR>;
            layers                = <COMBOLAYERS>;
        };
        hash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <19 33>;
            bindings              = <&kp HASH>;
            layers                = <COMBOLAYERS>;
        };

        select-all {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <29 47>;
            bindings              = <&kp LC(A)>;
            layers                = <COMBOLAYERS>;
        };
        cut {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <30 48>;
            bindings              = <&kp LC(X)>;
            layers                = <COMBOLAYERS>;
        };
        copy {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <31 49>;
            bindings              = <&kp LC(C)>;
            layers                = <COMBOLAYERS>;
        };
        paste {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <32 50>;
            bindings              = <&kp LC(V)>;
            layers                = <COMBOLAYERS>;
        };
        bold {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <33 51>;
            bindings              = <&kp LC(B)>;
            layers                = <COMBOLAYERS>;
        };

        /* Horizontal combos - right hand */

        quote {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <40 41>;
            bindings              = <&kp SQT>;
            layers                = <COMBOLAYERS>;
        };
        // Hold for CTRL+SHIFT, tap for tap for parenthesis
        lparen {
            timeout-ms            = <50>;
            require-prior-idle-ms = <20>;
            key-positions         = <41 42>;
            bindings              = <&lparen_csr RC(RIGHT_SHIFT) 0>;
            layers                = <COMBOLAYERS>;
        };
        // Hold for ALT+CTRL, tap for tap for parenthesis
        rparen {
            timeout-ms            = <50>;
            require-prior-idle-ms = <20>;
            key-positions         = <42 43>;
            bindings              = <&rparen_csr RA(RIGHT_CONTROL) 0>;
            layers                = <COMBOLAYERS>;
        };

        underscore {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <54 55>;
            bindings              = <&mm_under>;
            layers                = <COMBOLAYERS>;
        };
        lbrace {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <55 56>;
            bindings              = <&mm_lbrace>;
            layers                = <COMBOLAYERS>;
        };
        rbrace {
            timeout-ms            = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <56 57>;
            bindings              = <&mm_rbrace>;
            layers                = <COMBOLAYERS>;
        };


        /* Vertical combos - right hand */

        star {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <22 40>;
            bindings              = <&kp STAR>;
            layers                = <COMBOLAYERS>;
        };
        plus {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <23 41>;
            bindings              = <&kp PLUS>;
            layers                = <COMBOLAYERS>;
        };
        equal {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <24 42>;
            bindings              = <&kp EQUAL>;
            layers                = <COMBOLAYERS>;
        };
        ampersand {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <25 43>;
            bindings              = <&kp AMPS>;
            layers                = <COMBOLAYERS>;
        };
        caret {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <26 44>;
            bindings              = <&kp CARET>;
            layers                = <COMBOLAYERS>;
        };

        grave {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <40 54>;
            bindings              = <&kp GRAVE>;
            layers                = <COMBOLAYERS>;
        };
        minus {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <41 55>;
            bindings              = <&mm_minus>;
            layers                = <COMBOLAYERS>;
        };
        slash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions         = <42 56>;
            bindings              = <&kp SLASH>;
            layers                = <COMBOLAYERS>;
        };
        pipe {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <43 57>;
            bindings              = <&kp PIPE>;
            layers                = <COMBOLAYERS>;
        };
        backslash {
            timeout-ms            = <COMBO_TERM_SLOW>;
            // require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions         = <44 58>;
            bindings              = <&kp BSLH>;
            layers                = <COMBOLAYERS>;
        };
    };

    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hml: home_row_mod_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <HMR_TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;                                  // prevents accidental activation of modifiers when typing fast; larger the value, the harder it is to activate
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT 17>;      // keys not listed immediately produce a tap, i.e. keys on the left side of the keyboard
            hold-trigger-on-release;                                                    // allows combining multiple modifiers on same side of keyboard until key on opposite side is pressed and released
            //hold-while-undecided;                                                     // allows immediate usage of mouse with modifiers without waiting for tapping term to expire; prevents sticky shift on tap
        };
        hmr: home_row_mod_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <HMR_TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        lparen_csr: lparen_control_shift_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&mm_lparen>;                            // first position produces a hold (for ctrl+shift), second position produces a tap (for parenthesis mod-morph tap dance)
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };
            rparen_csr: rparen_control_shift_right {                                    // first position produces a hold (for alr+shift), second position produces a tap (for parenthesis mod-morph tap dance)
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&mm_rparen>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        esc_acl: esc_alt_ctrl_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            bindings                   = <&kp>, <&kp>;
            flavor                     = "balanced";
            tapping-term-ms            = <TAPPING_TERM>;
            require-prior-idle-ms      = <PRIOR_IDLE>;
            quick-tap-ms               = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };

        mtn: mod_tap_num {
            compatible            = "zmk,behavior-hold-tap";
            #binding-cells        = <2>;
            flavor                = "hold-preferred";
            tapping-term-ms       = <TAPPING_TERM>;
            quick-tap-ms          = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings              = <&mo>, <&sl>;
        };
        mts: mod_tap_shift {
            compatible            = "zmk,behavior-hold-tap";
            #binding-cells        = <2>;
            flavor                = "hold-preferred";
            tapping-term-ms       = <TAPPING_TERM>;
            quick-tap-ms          = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings              = <&kp>, <&sk>;
        };

        cw: cap_word {
            compatible      = "zmk,behavior-hold-tap";
            #binding-cells  = <2>;
            flavor          = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms    = <125>;
            bindings        = <&caps_word>, <&kp>;
        };
        nw: num_word {
            compatible      = "zmk,behavior-hold-tap";
            #binding-cells  = <2>;
            flavor          = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms    = <125>;
            bindings        = <&tog>, <&kp>;
        };


        /* Navigation */

        nav_left: nav_left {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <220>;
            quick-tap-ms               = <220>;
            hold-trigger-key-positions = <0>;
            bindings                   = <&mm_home>, <&kp>;
        };
        nav_right: nav_right {
            compatible                 = "zmk,behavior-hold-tap";
            #binding-cells             = <2>;
            flavor                     = "tap-preferred";
            tapping-term-ms            = <220>;
            quick-tap-ms               = <220>;
            hold-trigger-key-positions = <0>;
            bindings                   = <&mm_end>, <&kp>;
        };


        /* Mod Morphs */

        mm_minus: mm_minus {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp MINUS>, <&kp MINUS>;
            mods           = <(MOD_LSFT)>;
        };
        mm_under: mm_under {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp UNDER>, <&kp UNDER>;
            mods           = <(MOD_LSFT)>;
        };

        mm_home: mm_home {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp HOME>, <&kp HOME>;                                                // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
            mods           = <(MOD_LCTL)>;
        };
        mm_end: mm_end {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp END>, <&kp END>;
            mods           = <(MOD_LCTL)>;
        };

        mm_lparen: mm_lparen {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LPAR>, <&kp LT>;
            mods           = <(MOD_LSFT)>;
        };
        mm_rparen: mm_rparen {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RPAR>, <&kp GT>;
            mods           = <(MOD_LSFT)>;
        };
        mm_lbrace: mm_lbrace {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LBRC>, <&kp LBKT>;
            mods           = <(MOD_LSFT)>;
        };
        mm_lbracket: mm_lbracket {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp LBKT>, <&kp LBKT>;
            mods           = <(MOD_LSFT)>;
        };
        mm_rbrace: mm_rbrace {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RBRC>, <&kp RBKT>;
            mods           = <(MOD_LSFT)>;
        };
        mm_rbracket: mm_rbracket {
            compatible     = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings       = <&kp RBKT>, <&kp RBKT>;
            mods           = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                XXX      XXX          XXX          XXX           XXX           XXX        XXX                                                                 &mo MOD  XXX        XXX           XXX           XXX          XXX             &tog GAME
                XXX      &kp Q        &cw 0 W      &kp E         &kp R         &kp T      XXX                                                                 XXX      &kp Y      &kp U         &kp I         &kp O        &kp P           XXX
                XXX      &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &nw NUM G  XXX            XXX           XXX      XXX      XXX                  XXX      &kp H      &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  XXX
                XXX      &kp Z        &kp X        &kp C         &kp V         &kp B                                   XXX      XXX                                    &kp N      &kp M         &kp COMMA     &kp DOT      &kp FSLH        XXX
                &tog WT  XXX          XXX          XXX           XXX                      &lt NAV SPACE  &lt FN ENTER  &kp DEL  &kp DEL  &mtn NUM NUM &mts LSHFT LSHFT            XXX           XXX           XXX          XXX             XXX
            >;
        };
        game {
            bindings = <
                &kp ESC    &kp N1  &kp N2  &kp N3   &kp N4  &kp N5 ___                                                                   &mo MOD  ___    ___    &kp N8    &kp N9   &kp N0   ___
                &kp TAB    &kp Q   &kp W   &kp E    &kp R   &kp T  &kp I                                                                 &none    &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
                &kp CAPS   &kp A   &kp S   &kp D    &kp F   &kp G  &kp M            &kp LALT    &kp TAB    &kp LGUI  &kp RCTRL           &none    &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
                &kp LSHFT  &kp Z   &kp X   &kp C    &kp V   &kp B                               XXX        &kp PG_UP                              &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                ___        XXX     XXX     XXX      XXX                   &kp SPACE &kp LSHIFT  &kp LCTRL  &kp PG_DN &kp ENTER &kp SPACE                 &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
            >;
        };
        warthunder {
            bindings = <
                XXX        &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6                                                                   &mo MOD  ___    ___    &kp N8    &kp N9   &kp N0   ___
                &kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T   &kp I                                                                 &none    &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
                &kp CAPS   &kp A   &kp S   &kp D   &kp F   &kp G   &kp M            &kp LALT    &kp ESC    &kp LGUI  &kp RCTRL           &none    &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
                &kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &kp B                                XXX        &kp PG_UP                              &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                ___        &kp L   XXX     XXX     XXX                    &kp SPACE &kp LSHIFT  &kp LCTRL  &kp PG_DN &kp ENTER &kp SPACE                 &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
            >;
        };
        num {
            bindings = <
                ___  ___     ___     ___     ___     ___  XXX                                &mo MOD  ___  ___  ___  ___  ___        ___
                ___  ___     &kp N7  &kp N8  &kp N9  ___  ___                                ___      ___  ___  ___  ___  ___        ___
                ___  &kp N0  &kp N4  &kp N5  &kp N6  ___  ___       ___  ___  ___  ___       ___      ___  ___  ___  ___  &kp COLON  ___
                ___  ___     &kp N1  &kp N2  &kp N3  ___                 ___  ___                     ___  ___  ___  ___  ___        ___
                ___  ___     ___     ___     ___               ___  ___  ___  ___  ___  ___                ___  ___  ___  ___        ___
            >;
        };
        nav {
            bindings = <
                ___  ___  ___  ___        ___  ___  XXX                                &mo MOD  ___               ___               ___              ___                 ___  ___
                ___  ___  ___  &kp LG(E)  ___  ___  ___                                ___      ___               ___               ___              ___                 ___  ___
                ___  ___  ___  &alt-tab   ___  ___  ___       ___  ___  ___  ___       ___      &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  ___  ___
                ___  ___  ___  ___        ___  ___                 ___  ___                     ___               &kp PG_UP         &kp PG_DN        ___                 ___  ___
                ___  ___  ___  ___        ___            ___  ___  ___  ___  ___  ___                             ___               ___              ___                 ___  ___
            >;
        };
        fn {
            bindings = <
                ___  ___      ___     ___     ___     ___  XXX                                 &mo MOD  ___  ___  ___  ___  ___  ___
                ___  &kp F12  &kp F7  &kp F8  &kp F9  ___  ___                                 ___      ___  ___  ___  ___  ___  ___
                ___  &kp F11  &kp F4  &kp F5  &kp F6  ___  ___       ___  ___  ___  ___        ___      ___  ___  ___  ___  ___  ___
                ___  &kp F10  &kp F1  &kp F2  &kp F3  ___                 ___  ___                      ___  ___  ___  ___  ___  ___
                ___  ___      ___     ___     ___               ___  ___  ___  ___  ___  ___                 ___  ___  ___  ___  ___
            >;
        };
        mod {
            bindings = <
                XXX &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 XXX                                                       ___                     XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          &bootloader                                               &bootloader             XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          ___          XXX XXX &bt BT_CLR  XXX                      &rgb_ug RGB_MEFS_CMD 5  XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          &macro_ver   XXX                           XXX XXX                                                          XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX                                XXX XXX XXX XXX         &bl BL_TOG &rgb_ug RGB_TOG                            &bl BL_INC  &bl BL_DEC  XXX  XXX  XXX
            >;
        };
    };
};