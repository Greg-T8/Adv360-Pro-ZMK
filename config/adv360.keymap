/*

This is my keymap for the Kinesis Advantage 360 keyboard. 
Some configuration was taken from Urob's base keymap config: 
- https://github.com/urob/zmk-config/blob/main/config/base.keymap
*/

#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define NAV     1
#define FN      2
#define NUM     3
#define GAME    4
#define MOD     5

#define XXX &none
#define ___ &trans

#define TAPPING_TERM 220
#define HMR_TAPPING_TERM 220
#define PRIOR_IDLE   170
#define QUICK_TAP    150

#define KEYS_LEFT   0  1  2  3  4  5  6 \
                   14 15 16 17 18 19 20 \
                   28 29 30 31 32 33 34 \
                   46 47 48 49 50 51 \
                   60 61 62 63 64
#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 55 56 57 58 59 \
                         71 72 73 74 75

#define THUMBS_LEFT  35 36 52 65 66 67
#define THUMBS_RIGHT 37 38 53 68 69 70

#define COMBO_TERM_FAST 15
#define COMBO_TERM_SLOW 200

// Larger idle time reduces accidental combos when typing fast 
#define COMBO_IDLE_FAST 120
#define COMBO_IDLE_SLOW 250

// Layer-tap settings
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick_tap_ms = <175>;
};

// Mod-tap settings. Used by navigation combos.
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick_tap_ms = <220>;
    hold-trigger-key-positions = <0>;
};

// Sticky-key settings
&sk {
    release-after-ms = <900>;
    quick-release;              // no double capitalization when rolling keys
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS DEL BSPC>;
}; 

/ {
    combos {
        compatible = "zmk,combos";

        left-hand-control-shift {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <31 32>;
            bindings = <&kp LC(LEFT_SHIFT)>;
        };

        left-hand-num-layer-activation {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <65 66>;
            bindings = <&mo NUM>;
        };
        
        /* Horizontal combos - left hand */

        reverse-tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <16 17>;
            bindings = <&kp LS(TAB)>;
        };
        tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <17 18>;
            bindings = <&kp TAB>;
        };
        esc {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <30 31>;
            bindings = <&kp ESC>;
        };
        undo {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <32 33>;
            bindings = <&kp LC(Z)>;
        };
        del {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <48 49>;
            bindings = <&mt LC(DEL) DEL>;
        };
        bspc {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <49 50>;
            bindings = <&mt LC(BSPC) BSPC>;
        };


        /* Vertical combos - left hand */ 

        exclamation {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <15 29>;
            bindings = <&kp EXCL>;
        };
        percent {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <16 30>;
            bindings = <&kp PRCNT>;
        };
        at {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <17 31>;
            bindings = <&kp AT>;
        };
        dollar {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <18 32>;
            bindings = <&kp DLLR>;
        };
        hash {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <19 33>;
            bindings = <&kp HASH>;
        };

        select-all {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <29 47>;
            bindings = <&kp LC(A)>;
        };
        cut {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <30 48>;
            bindings = <&kp LC(X)>;
        };
        copy {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <31 49>;
            bindings = <&kp LC(C)>;
        };
        paste {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <32 50>;
            bindings = <&kp LC(V)>;
        };
        bold {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <33 51>;
            bindings = <&kp LC(B)>;
        };


        /* Horizontal combos - right hand */

        pipe {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <40 41>;
            bindings = <&mm_pipe>;
        };
        quote {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 42>;
            bindings = <&kp SQT>;
        };
        pairs {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <55 56>;
            bindings = <&tdp>;
        };


        /* Vertical combos - right hand */

        caret {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <22 40>;
            bindings = <&kp CARET>;
        };
        star {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <23 41>;           
            bindings = <&kp STAR>;
        };
        minus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <24 42>;
            bindings = <&kp MINUS>;
        };
        ampersand {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <25 43>;
            bindings = <&kp AMPS>;
        };

        grave {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
            key-positions = <41 55>;
            bindings = <&kp GRAVE>;
        };
        plus {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
            key-positions = <42 56>;
            bindings = <&mm_plus>;
        };
    };

    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <HMR_TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;                                      // prevents accidental activation of modifiers when typing fast; larger the value, the harder it is to activate
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS_LEFT THUMBS_RIGHT 17>;     // keys not listed immediately produce a tap, i.e. keys on the left side of the keyboard
            hold-trigger-on-release;                                                   // allows combining multiple modifiers on same side of keyboard until key on opposite side is pressed and released                               
            //hold-while-undecided;                                                    // allows immediate usage of mouse with modifiers without waiting for tapping term to expire; prevents sticky shift on tap
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <HMR_TAPPING_TERM>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            quick-tap-ms = <QUICK_TAP>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS_LEFT THUMBS_RIGHT>;
            hold-trigger-on-release;
        };
        
        tdp: tap_dance_pairs {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&mm_lparen>, <&mm_rparen>;
        };

        mtn: mod_tap_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings = <&mo>, <&sl>;                
        };

        mts: mod_tap_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            bindings = <&kp>, <&sk>;                
        };

        cw: cap_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms = <125>;
            bindings = <&caps_word>, <&kp>;
        };
        
        nw: num_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick_tap_ms = <125>;
            bindings = <&tog>, <&kp>;
        };

        /* NAV cluster */

        nav_left: nav_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mm_home>, <&kp>;
        };
        nav_right: nav_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
            bindings = <&mm_end>, <&kp>;
        };

        mm_home: mm_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;      // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
            mods = <(MOD_LCTL)>;
        };
        mm_end: mm_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;
            mods = <(MOD_LCTL)>;
        }; 

        mm_plus: mm_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>;
            mods = <(MOD_LSFT)>;
        };

        mm_pipe: mm_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BSLH>;
            mods = <(MOD_LSFT)>;
        };

        mm_lparen: mm_lparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&mm_lbracket>;
            mods = <(MOD_LSFT)>;
        };
        mm_lbracket: mm_lbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LBRC>;
            mods = <(MOD_LCTL)>;
        };
        
        mm_rparen: mm_rparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&mm_rbracket>;
            mods = <(MOD_LSFT)>;
        };
        mm_rbracket: mm_rbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RBRC>;
            mods = <(MOD_LCTL)>;
        };
    
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                XXX  XXX          XXX          XXX           XXX           XXX        &tog 4                                                              &mo MOD  XXX    XXX           XXX           XXX          XXX             XXX
                XXX  &kp Q        &cw 0 W      &kp E         &kp R         &kp T      XXX                                                                 XXX      &kp Y  &kp U         &kp I         &kp O        &kp P           XXX
                XXX  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &nw NUM G  XXX            XXX           XXX      XXX      XXX                  XXX      &kp H  &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  XXX
                XXX  &kp Z        &kp X        &kp C         &kp V         &kp B                                   XXX      XXX                                    &kp N  &kp M         &kp COMMA     &kp DOT      &kp FSLH        XXX
                XXX  XXX          XXX          XXX           XXX                      &lt NAV SPACE  &lt FN ENTER  &kp DEL  &kp DEL  &mtn NUM NUM &mts LSHFT LSHFT        XXX           XXX           XXX          XXX             XXX
            >;
        }; 
        nav {
            bindings = <
                ___  ___  ___  ___        ___        ___  XXX                                &mo MOD  ___               ___               ___              ___                 ___  ___
                ___  ___  ___  ___        ___        ___  ___                                ___      ___               ___               ___              ___                 ___  ___
                ___  ___  ___  ___        ___        ___  ___       ___  ___  ___  ___       ___      &nav_left 0 LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &nav_right 0 RIGHT  ___  ___
                ___  ___  ___  &kp PG_DN  &kp PG_UP  ___                 ___  ___                     ___               &kp PG_DN         &kp PG_UP        ___                 ___  ___
                ___  ___  ___  ___        ___                  ___  ___  ___  ___  ___  ___                             ___               ___              ___                 ___  ___
            >;
        };
        fn {
            bindings = <
                ___  ___      ___     ___     ___     ___  XXX                                 &mo MOD  ___  ___  ___  ___  ___  ___
                ___  &kp F12  &kp F7  &kp F8  &kp F9  ___  ___                                 ___      ___  ___  ___  ___  ___  ___
                ___  &kp F11  &kp F4  &kp F5  &kp F6  ___  ___       ___  ___  ___  ___        ___      ___  ___  ___  ___  ___  ___
                ___  &kp F10  &kp F1  &kp F2  &kp F3  ___                 ___  ___                      ___  ___  ___  ___  ___  ___
                ___  ___      ___     ___     ___               ___  ___  ___  ___  ___  ___                 ___  ___  ___  ___  ___
            >;
        };
        num {
            bindings = <
                ___  ___     ___     ___     ___     ___  XXX                                &mo MOD  ___  ___  ___  ___  ___        ___
                ___  ___     &kp N7  &kp N8  &kp N9  ___  ___                                ___      ___  ___  ___  ___  ___        ___
                ___  &kp N0  &kp N4  &kp N5  &kp N6  ___  ___       ___  ___  ___  ___       ___      ___  ___  ___  ___  &kp COLON  ___
                ___  ___     &kp N1  &kp N2  &kp N3  ___                 ___  ___                     ___  ___  ___  ___  ___        ___
                ___  ___     ___     ___     ___               ___  ___  ___  ___  ___  ___                ___  ___  ___  ___        ___
            >;
        };
        game {
            bindings = <
                &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
                &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                            &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
                &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none               &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
                &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                                &kp HOME &kp PG_UP                           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp SPACE &kp LSHIFT   &kp LCTRL  &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
            >; 
        };
        mod {
            bindings = <
                XXX &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 XXX                                                       ___                     XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          &bootloader                                               &bootloader             XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX          XXX          ___          XXX XXX &bt BT_CLR  XXX                      &rgb_ug RGB_MEFS_CMD 5  XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          &macro_ver   XXX                           XXX XXX                                                          XXX  XXX         XXX         XXX  XXX  XXX
                XXX XXX          XXX          XXX          XXX                                XXX XXX XXX XXX         &bl BL_TOG &rgb_ug RGB_TOG                            &bl BL_INC  &bl BL_DEC  XXX  XXX  XXX
            >;
        };
    };
};